import jsonimport randomfrom datetime import timedeltafrom django.utils import timezonefrom django.forms.models import model_to_dictfrom rest_framework import status, viewsetsfrom common.helpers.create_custom_response import create_custom_responsefrom common.helpers.login_required import login_requiredfrom common.helpers.models_to_list import models_to_listfrom common.helpers.required_keys import required_keysfrom mice.models import Micefrom analysis.models.preprocessing import MiceFeatures, AveragedMiceFeaturesfrom cameras.models import Camerasfrom watchers.constants.constants import ExperimentWatcherRequestsfrom watchers.constants.watcher_requests import WatcherRequestsfrom experiments.helpers.filter_experiments import filter_experimentsfrom experiments.constants.constants import EXPERIMENT_CREATE_FIELDSfrom experiments.constants.enums import ExperimentStatusesfrom experiments.serializers import ExperimentsSerializerfrom experiments.models import Experimentsclass ExperimentsViews(viewsets.ModelViewSet):    serializer_class = ExperimentsSerializer    @login_required()    def list(self, request, user):  # pylint: disable=unused-argument        try:            user_id = user['user_info']['id']            experiments = list(Experiments.objects.filter(user_id=user_id))            experiments = filter_experiments(experiments, request.GET.get('filters', {}))            return create_custom_response(                status.HTTP_200_OK,                {'experiments': experiments}            )        except Exception:            return create_custom_response(status.HTTP_500_INTERNAL_SERVER_ERROR)    @login_required()    def retrieve(self, request, user, pk=None): # pylint: disable=unused-argument        try:            user_id = user['user_info']['id']            experiment = model_to_dict(Experiments.objects.get(                user_id=user_id,                id=pk            ))            experiment_mice = Mice.objects.filter(experiment=pk)            experiment['mice'] = models_to_list(experiment_mice)            return create_custom_response(status.HTTP_200_OK, {'experiment': experiment})        except Exception:            return create_custom_response(status.HTTP_500_INTERNAL_SERVER_ERROR)    # TODO: добавить валидацию данных https://tracker.yandex.ru/VPAGROUPDEV-602    @required_keys([        'title'    ])    @login_required()    def create(self, request, user): # pylint: disable=unused-argument        try:            request_data = json.loads(request.body)            if not (set(request_data.keys()) <= set(EXPERIMENT_CREATE_FIELDS)):                return create_custom_response(                    status.HTTP_400_BAD_REQUEST,                    {'reason': 'wrong keys'}                )            experiment_data = {                **request_data,                'user_id': user['user_info']['id'],            }            experiment = Experiments.objects.create(**experiment_data)            return create_custom_response(                status.HTTP_201_CREATED,                {'experiment': experiment.id}            )        except Exception:            return create_custom_response(status.HTTP_500_INTERNAL_SERVER_ERROR)    @required_keys([        'experiment_ids'    ])    @login_required()    def delete(self, request, user):  # pylint: disable=unused-argument        try:            user_id = user['user_info']['id']            request_data = json.loads(request.body)            experiment_ids = request_data['experiment_ids']            Experiments.objects.filter(                user_id=user_id,                id__in=experiment_ids            ).delete()            return create_custom_response(status.HTTP_200_OK)        except Exception:            return create_custom_response(status.HTTP_500_INTERNAL_SERVER_ERROR)    @required_keys([        'status'    ])    @login_required()    def change_experiment_status(self, request, user, pk=None):  # pylint: disable=unused-argument        try:            user_id = user['user_info']['id']            new_status = json.loads(request.body)['status']            model_object_dates = dict()            if ExperimentStatuses.validate_change_status(new_status):                if new_status == ExperimentStatuses.Start.value:                    model_object_dates['date_start'] = timezone.now()                    new_status = ExperimentStatuses.Continue.value                if new_status == ExperimentStatuses.Complete.value:                    model_object_dates['date_end'] = timezone.now()                model_object = {                    **model_object_dates,                    'status': new_status,                }                Experiments.objects.filter(                    user_id=user_id,                    pk=pk                ).update(**model_object)                Mice.objects.filter(                    user_id=user_id,                    experiment_id=pk                ).update(status=new_status)                if new_status == ExperimentStatuses.Continue.value:                    WatcherRequests.manage_experiment_watcher(                        experiment_id=pk,                        status=ExperimentWatcherRequests.Update.value                    )                if new_status == ExperimentStatuses.Pause.value:                    WatcherRequests.manage_experiment_watcher(                        experiment_id=pk,                        status=ExperimentWatcherRequests.Remove.value                    )                if new_status == ExperimentStatuses.Complete.value:                    WatcherRequests.manage_experiment_watcher(                        experiment_id=pk,                        status=ExperimentWatcherRequests.Remove.value                    )            else:                return create_custom_response(                    status.HTTP_400_BAD_REQUEST,                    {'reason': 'wrong status'}                )            return create_custom_response(status.HTTP_200_OK)        except Exception:            return create_custom_response(status.HTTP_500_INTERNAL_SERVER_ERROR)    # TODO: добавить валидацию данных https://tracker.yandex.ru/VPAGROUPDEV-602    @login_required()    def update_info(self, request, user, pk=None):  # pylint: disable=unused-argument        try:            user_id = user['user_info']['id']            update_fields = json.loads(request.body)            if not (set(update_fields.keys()) <= set(EXPERIMENT_CREATE_FIELDS)):                return create_custom_response(                    status.HTTP_400_BAD_REQUEST,                    {'reason': 'wrong keys'}                )            Experiments.objects.filter(                user_id=user_id,                pk=pk            ).update(**update_fields)            return create_custom_response(status.HTTP_200_OK)        except Exception:            return create_custom_response(status.HTTP_500_INTERNAL_SERVER_ERROR)    #TODO: добавить валидацию данных https://tracker.yandex.ru/VPAGROUPDEV-602    @required_keys([        'camera',        'name'    ])    @login_required()    def add_camera_to_experiment(self, request, user, pk=None):  # pylint: disable=unused-argument        try:            user_id = user['user_info']['id']            request_data = json.loads(request.body)            camera = Cameras.objects.get(id=request_data['camera'])            experiment = Experiments.objects.get(                user_id=user_id,                pk=pk            )            request_data['camera'] = camera            request_data['name'] = request_data['name']            request_data['experiment'] = experiment            request_data['user'] = experiment.user            mouse = Mice.objects.create(**request_data)            # TODO: delete this part after real camera implementation!!! This is fake data for mouse            mice_features = [MiceFeatures(**{                'mouse': mouse,                'date': timezone.now() + timedelta(seconds=l * 60),                'x_head': 5 * random.randint(1, 5) + random.randint(10, 20),                'y_head': 5 * random.randint(1, 5) + random.randint(10, 20),                'x_center': 5 * random.randint(1, 5) + random.randint(10, 20),                'y_center': 5 * random.randint(1, 5) + random.randint(10, 20),                'area': 5 * random.randint(1, 5) + random.randint(10, 20),                'size': 5 * random.randint(1, 5) + random.randint(10, 20),                'speed': 5 * random.randint(1, 5) + random.randint(10, 20),                'rotation': 5 * random.randint(1, 5) + random.randint(10, 20),                'temperature': 2 * random.randint(1, 5) + random.randint(10, 20),                'temperature_speed': 2 * random.randint(1, 5) + random.randint(10, 20),            }) for l in range(12 * 60)]            MiceFeatures.objects.bulk_create(mice_features)            return create_custom_response(                status.HTTP_201_CREATED,                {'mouse': mouse.id}            )        except Exception:            return create_custom_response(status.HTTP_500_INTERNAL_SERVER_ERROR)